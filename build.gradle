buildscript {
    ext {
        springVersion = '2.3.5.RELEASE'
        springDependencyManagement = '1.0.10.RELEASE'
        modelMapperVersion = '2.3.5'
        swagger2Version = '2.9.2'
        swaggerAnnotationsVersion = '1.6.0'
        swaggerModelsVersion = '1.6.0'
        checkStyleToolVersion = '8.23'
        lombokVersion = '5.3.0'
        zeeBeStarterVersion = '0.26.2'
        nilsWsdlVersion = '0.12'
        cxfVersion = '3.3.7'
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "no.nils:wsdl2java:${nilsWsdlVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${lombokVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagement}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springVersion}"
    }
}

apply plugin: 'java-library'
apply plugin: 'checkstyle'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.freefair.lombok'
apply plugin: 'no.nils.wsdl2java'

group 'kz.codesmith.epay'
version '0.0.1-RELEASE'

repositories {
    jcenter()
    maven {
        url "https://gitlab.com/api/v4/groups/code_smith/-/packages/maven"
        name "GitLab"
        credentials(HttpHeaderCredentials) {
            name = 'Deploy-Token'
            value = 'ibCVQgQTN5L1ByYY7_fZ'
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

ext {
    useSpringWeb = {
        dependencies {
            implementation('org.springframework.boot:spring-boot-starter-web')
        }
    }
    useSpringAOP = {
        dependencies {
            implementation('org.springframework.boot:spring-boot-starter-aop')
        }
    }
    useSpringActuator = {
        dependencies {
            implementation('org.springframework.boot:spring-boot-starter-actuator')
        }
    }
    useSpringDevtools = {
        dependencies {
            developmentOnly('org.springframework.boot:spring-boot-devtools')
        }
    }
    useSpringValidation = {
        dependencies {
            implementation('org.springframework.boot:spring-boot-starter-validation')
            implementation 'kz.codesmith.springboot:validators-spring-boot-starter:0.1.2'
        }
    }
    useSpringJpa = {
        dependencies {
            implementation('org.springframework.boot:spring-boot-starter-data-jpa')
        }
    }
    useSpringConfigurationProcessor = {
        dependencies {
            annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
        }
    }
    useSpringJdbc = {
        dependencies {
            implementation('org.springframework.boot:spring-boot-starter-jdbc')
        }
    }
    useSpringAmqp = {
        dependencies {
            implementation('org.springframework.boot:spring-boot-starter-amqp')
            testImplementation 'org.springframework.amqp:spring-rabbit-test'
        }
    }
    useSpringSecurity = {
        dependencies {
            implementation("org.springframework.boot:spring-boot-starter-security")
            testImplementation('org.springframework.security:spring-security-test')
        }
    }
    useSwagger = {
        dependencies {
            implementation("io.springfox:springfox-swagger2:${swagger2Version}") {
                exclude module: 'swagger-annotations'
                exclude module: 'swagger-models'
            }
            implementation("io.swagger:swagger-annotations:${swaggerAnnotationsVersion}")
            implementation("io.swagger:swagger-models:${swaggerModelsVersion}")
            implementation("io.springfox:springfox-swagger-ui:${swagger2Version}")
            implementation("io.springfox:springfox-bean-validators:${swagger2Version}")
        }
    }
    useSpringTests = {
        dependencies {
            testImplementation('org.springframework.boot:spring-boot-starter-test') {
                exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
            }
        }
    }
    useTestNg = {
        dependencies {
            testImplementation 'org.testng:testng:7.3.0'
            testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
            testImplementation group: 'org.powermock', name: 'powermock-module-testng', version: '2.0.7'
            testImplementation group: 'org.powermock', name: 'powermock-module-testng-common', version: '2.0.7'
        }
    }
    usePostgres = {
        dependencies {
            implementation('org.postgresql:postgresql')
        }
    }
    useFlyway = {
        dependencies {
            implementation('org.flywaydb:flyway-core')
        }
    }
    useModelMapper = {
        dependencies {
            implementation("org.modelmapper:modelmapper:${modelMapperVersion}")
        }
    }
    useCommons = {
        dependencies {
            annotationProcessor("org.projectlombok:lombok")
            implementation('org.apache.commons:commons-lang3')
            implementation('commons-codec:commons-codec:1.15')
        }
    }
    useLogstashEncoder = {
        dependencies {
            runtimeOnly('net.logstash.logback:logstash-logback-encoder:6.1')
        }
    }
    useJackson = {
        dependencies {
            implementation 'com.fasterxml.jackson.core:jackson-databind'
            implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider'
            implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        }
    }
    useZeeBe = {
        dependencies {
            implementation("io.zeebe.spring:spring-zeebe-starter:${zeeBeStarterVersion}")
        }
    }

    useCxf = {
        dependencies {
            implementation "org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}"
            implementation "org.apache.cxf:cxf-spring-boot-starter-jaxrs:${cxfVersion}"
            implementation "org.apache.cxf:cxf-rt-features-logging:${cxfVersion}"
            implementation "javax.xml.ws:jaxws-api"
        }
    }

    useCaching = {
        dependencies {
            implementation("org.springframework.boot:spring-boot-starter-data-redis")
            implementation("org.springframework.boot:spring-boot-starter-cache")
        }
    }

    useSmpp = {
        dependencies {
            implementation 'com.fizzed:ch-smpp:5.0.9'
            implementation 'com.cloudhopper:ch-commons-gsm:3.0.0'
            implementation 'com.cloudhopper:ch-commons-charset:3.0.2'
        }
    }

    useCommonsPool = {
        dependencies {
            implementation 'org.apache.commons:commons-pool2'
        }
    }

    useJacksonXml = {
        dependencies {
            implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.10.3'
        }
    }

    useSuperCsv = {
        dependencies {
            implementation 'net.sf.supercsv:super-csv:2.4.0'
        }
    }

    useWsdl2Java = {
        dependencies {
            wsdl2java(
                    'com.sun.xml.bind:jaxb-xjc:2.3.3',
                    'javax.xml.bind:jaxb-api:2.3.3',
                    'javax.xml.ws:jaxws-api:2.3.3',
                    "org.apache.cxf:cxf-rt-wsdl:${cxfVersion}",
                    'javax.jws:javax.jws-api:1.1',

                    'com.sun.xml.bind:jaxb-core:2.3.0.1',
                    'com.sun.xml.bind:jaxb-xjc:2.3.3',
                    'com.sun.xml.bind:jaxb-impl:2.3.3'
            )
        }
    }

    useSpringMail = {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-mail:2.3.5.RELEASE'
        }
    }

    useThymeleafPdf = {
        dependencies {
            implementation 'com.itextpdf:itext7-core:7.1.9'
            implementation 'com.itextpdf.tool:xmlworker:5.4.3'
            implementation 'org.thymeleaf:thymeleaf:3.0.11.RELEASE'
        }
    }

    useAwsJavaSdk = {
        dependencies {
            implementation 'com.amazonaws:aws-java-sdk-s3:1.11.911'
        }
    }

    useMyBatis = {
        dependencies {
            compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3")
        }
    }

    useFirebase = {
        dependencies {
            implementation 'com.google.firebase:firebase-admin:7.1.0'
        }
    }

    useTelegramBot = {
        dependencies {
            implementation 'org.telegram:telegrambots-spring-boot-starter:4.1.2'
        }
    }

    useSpringReTry = {
        dependencies {
            implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.1'
        }
    }
}

useSpringWeb()
useSpringAOP()
useSpringActuator()
useSpringConfigurationProcessor()
useSpringValidation()
useSpringSecurity()
useSpringTests()
useSpringJdbc()
useSpringJpa()

useCxf()
useJackson()
useCommons()
useFlyway()
usePostgres()
useModelMapper()
useSwagger()
useLogstashEncoder()
useWsdl2Java()
useCaching()
useThymeleafPdf()
useSuperCsv()
useSpringAmqp()

checkstyle {
    toolVersion = "${checkStyleToolVersion}"
    ignoreFailures = false
    maxWarnings = 0
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

afterEvaluate {
    if (project.plugins.hasPlugin("java") || project.plugins.hasPlugin("java-library")) {

        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
        }

    }
    if (project.plugins.hasPlugin('io.spring.dependency-management')) {
        if (!project.plugins.hasPlugin('org.springframework.boot')) {
            dependencyManagement {
                imports {
                    mavenBom "org.springframework.boot:spring-boot-starter-parent:${springVersion}"
                }
            }
        }
    }
}

dependencies {
    implementation 'kz.codesmith.epay:shared-models:0.0.1-RELEASE'
    implementation 'kz.codesmith.epay:lib-security:0.0.1-RELEASE'
    implementation 'kz.codesmith.epay:lib-ws-connector:0.0.1-RELEASE'
    implementation 'kz.codesmith.epay:gw-telegram-api:0.0.1-RELEASE'
    implementation 'kz.codesmith:lib-spring-aop-logger:1.0.1.RELEASE'
    implementation 'kz.codesmith:lib-jsonb-postgres:1.0.0.RELEASE'
    implementation 'com.sun.xml.messaging.saaj:saaj-impl:1.5.2'
    implementation 'net.andreinc.jbvext:jbvext:0.0.11'
    implementation 'org.mockito:mockito-core:3.6.0'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.911'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'io.pebbletemplates:pebble-spring-boot-starter:3.1.5'
    implementation 'com.openhtmltopdf:openhtmltopdf-core:1.0.6'
    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.6'
    implementation 'com.openhtmltopdf:openhtmltopdf-slf4j:1.0.6'
    implementation('co.elastic.apm:apm-agent-attach:1.24.0')
    compile group: 'org.apache.poi', name: 'poi', version: '4.0.1'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.0.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

test {
    useJUnitPlatform()
}

wsdl2java {
    wsdlsToGenerate = [
            ['-xjc', '-mark-generated', '-verbose', '-b', "$projectDir/src/main/resources/wsdl/jaxb-binding.xml", '-autoNameResolution', "$projectDir/src/main/resources/wsdl/1cSiteExchange.wsdl"],
            ['-xjc', '-mark-generated', '-verbose', '-b', "$projectDir/src/main/resources/wsdl/jaxb-binding.xml", '-autoNameResolution', "$projectDir/src/main/resources/wsdl/ScoreService.wsdl"],
            ['-xjc', '-mark-generated', '-verbose', '-b', "$projectDir/src/main/resources/wsdl/jaxb-binding.xml", '-autoNameResolution', "$projectDir/src/main/resources/wsdl/FicoScoringService.wsdl"],
            ['-xjc', '-mark-generated', '-verbose', '-b', "$projectDir/src/main/resources/wsdl/jaxb-binding.xml", '-autoNameResolution', "$projectDir/src/main/resources/wsdl/kdnService.wsdl"],
            ['-xjc', '-mark-generated', '-verbose', '-b', "$projectDir/src/main/resources/wsdl/jaxb-binding.xml", '-autoNameResolution', "$projectDir/src/main/resources/wsdl/ClosedContractsService.wsdl"],
            ['-xjc', '-p', 'kz.pitech.mfo', '-autoNameResolution', "$projectDir/src/main/resources/wsdl/PaymentServices.wsdl"]
    ]
    stabilizeAndMergeObjectFactory = true
    cxfVersion = "${cxfVersion}"
}


